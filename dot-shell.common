# Interactive operation
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Default to human readable figures
alias df='df -h'
alias du='du -h'

# Pretty printing for listing and greppers and 
alias whence='type -a'                        # where, of a sort
alias grep='grep --color'                     # show differences in colour
alias egrep='egrep --color=auto'              # show differences in colour
alias fgrep='fgrep --color=auto'              # show differences in colour

# Some shortcuts for different directory listings
alias ls='ls -hF --color=tty'                 # classify files in colour
alias dir='ls --color=auto --format=vertical'
alias vdir='ls --color=auto --format=long'
alias ll='ls -l'                              # long list
alias la='ls -lA'                             # all but . and .. as a list
alias l='ls -CF'                              # list by columns (-C) and classify (-F) - normal behavior?

# Add an "alert" alias for long running commands.  Use like so:
#   >>> sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Standalone applications to extend shell function
eval "$(mise activate bash)"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Enlyft postgresql aliases for connection to each env
alias psql_stage='psql postgresql://${PSQL_STAGE_USERNAME}:${PSQL_STAGE_PASSWORD}@${PSQL_STAGE_HOST}/${PSQL_STAGE_DB}?client_encoding=utf-8'
alias psql_preprod='psql postgresql://${PSQL_PREPROD_USERNAME}:${PSQL_PREPROD_PASSWORD}@${PSQL_PREPROD_HOST}/${PSQL_PREPROD_DB}?client_encoding=utf-8'
alias psql_prod='psql postgresql://${PSQL_PROD_USERNAME}:${PSQL_PROD_PASSWORD}@${PSQL_PROD_HOST}/${PSQL_PROD_DB}?client_encoding=utf-8'

## SSH agent shenanigans (run this last to avoid issues with interaction)
if ! pgrep -u "$USER" ssh-agent > /dev/null; then
  echo Generating SSH agent env
  ssh-agent -t 1d > "$XDG_RUNTIME_DIR/ssh-agent.env"
fi
if [[ ! -f "$SSH_AUTH_SOCK" ]]; then
  echo Sourcing SSH agent env
  source "$XDG_RUNTIME_DIR/ssh-agent.env" > /dev/null
fi
if [[ $(ssh-add -l | grep "^.*$" -c) -ne 2 ]]; then
  ssh-add -t 1d ~/.ssh/deploy > /dev/null
  ssh-add -t 1d ~/.ssh/edge > /dev/null
fi
